var window = global;
window.location = {
    origin: "https://www.toutiao.com",
    protocol: "https:",
    host: "www.toutiao.com",
    hostname: "www.toutiao.com",
    port: "",
    pathname: "/",
    search: "",
    hash: "",
    href: "https://www.toutiao.com/",
}
window.navigator = {
    userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36",
}

function get_as_cp(){
    function s(t, e) {
        var i = (65535 & t) + (65535 & e)
            , n = (t >> 16) + (e >> 16) + (i >> 16);
        return n << 16 | 65535 & i
    }
    function o(t, e) {
        return t << e | t >>> 32 - e
    }
    function r(t, e, i, n, a, r) {
        return s(o(s(s(e, t), s(n, r)), a), i)
    }
    function l(t, e, i, n, a, s, o) {
        return r(e & i | ~e & n, t, e, a, s, o)
    }
    function u(t, e, i, n, a, s, o) {
        return r(e & n | i & ~n, t, e, a, s, o)
    }
    function c(t, e, i, n, a, s, o) {
        return r(e ^ i ^ n, t, e, a, s, o)
    }
    function d(t, e, i, n, a, s, o) {
        return r(i ^ (e | ~n), t, e, a, s, o)
    }
    function h(t, e) {
        t[e >> 5] |= 128 << e % 32,
            t[(e + 64 >>> 9 << 4) + 14] = e;
        var i, n, a, o, r, h = 1732584193, m = -271733879, _ = -1732584194, p = 271733878;
        for (i = 0; i < t.length; i += 16)
            n = h,
                a = m,
                o = _,
                r = p,
                h = l(h, m, _, p, t[i], 7, -680876936),
                p = l(p, h, m, _, t[i + 1], 12, -389564586),
                _ = l(_, p, h, m, t[i + 2], 17, 606105819),
                m = l(m, _, p, h, t[i + 3], 22, -1044525330),
                h = l(h, m, _, p, t[i + 4], 7, -176418897),
                p = l(p, h, m, _, t[i + 5], 12, 1200080426),
                _ = l(_, p, h, m, t[i + 6], 17, -1473231341),
                m = l(m, _, p, h, t[i + 7], 22, -45705983),
                h = l(h, m, _, p, t[i + 8], 7, 1770035416),
                p = l(p, h, m, _, t[i + 9], 12, -1958414417),
                _ = l(_, p, h, m, t[i + 10], 17, -42063),
                m = l(m, _, p, h, t[i + 11], 22, -1990404162),
                h = l(h, m, _, p, t[i + 12], 7, 1804603682),
                p = l(p, h, m, _, t[i + 13], 12, -40341101),
                _ = l(_, p, h, m, t[i + 14], 17, -1502002290),
                m = l(m, _, p, h, t[i + 15], 22, 1236535329),
                h = u(h, m, _, p, t[i + 1], 5, -165796510),
                p = u(p, h, m, _, t[i + 6], 9, -1069501632),
                _ = u(_, p, h, m, t[i + 11], 14, 643717713),
                m = u(m, _, p, h, t[i], 20, -373897302),
                h = u(h, m, _, p, t[i + 5], 5, -701558691),
                p = u(p, h, m, _, t[i + 10], 9, 38016083),
                _ = u(_, p, h, m, t[i + 15], 14, -660478335),
                m = u(m, _, p, h, t[i + 4], 20, -405537848),
                h = u(h, m, _, p, t[i + 9], 5, 568446438),
                p = u(p, h, m, _, t[i + 14], 9, -1019803690),
                _ = u(_, p, h, m, t[i + 3], 14, -187363961),
                m = u(m, _, p, h, t[i + 8], 20, 1163531501),
                h = u(h, m, _, p, t[i + 13], 5, -1444681467),
                p = u(p, h, m, _, t[i + 2], 9, -51403784),
                _ = u(_, p, h, m, t[i + 7], 14, 1735328473),
                m = u(m, _, p, h, t[i + 12], 20, -1926607734),
                h = c(h, m, _, p, t[i + 5], 4, -378558),
                p = c(p, h, m, _, t[i + 8], 11, -2022574463),
                _ = c(_, p, h, m, t[i + 11], 16, 1839030562),
                m = c(m, _, p, h, t[i + 14], 23, -35309556),
                h = c(h, m, _, p, t[i + 1], 4, -1530992060),
                p = c(p, h, m, _, t[i + 4], 11, 1272893353),
                _ = c(_, p, h, m, t[i + 7], 16, -155497632),
                m = c(m, _, p, h, t[i + 10], 23, -1094730640),
                h = c(h, m, _, p, t[i + 13], 4, 681279174),
                p = c(p, h, m, _, t[i], 11, -358537222),
                _ = c(_, p, h, m, t[i + 3], 16, -722521979),
                m = c(m, _, p, h, t[i + 6], 23, 76029189),
                h = c(h, m, _, p, t[i + 9], 4, -640364487),
                p = c(p, h, m, _, t[i + 12], 11, -421815835),
                _ = c(_, p, h, m, t[i + 15], 16, 530742520),
                m = c(m, _, p, h, t[i + 2], 23, -995338651),
                h = d(h, m, _, p, t[i], 6, -198630844),
                p = d(p, h, m, _, t[i + 7], 10, 1126891415),
                _ = d(_, p, h, m, t[i + 14], 15, -1416354905),
                m = d(m, _, p, h, t[i + 5], 21, -57434055),
                h = d(h, m, _, p, t[i + 12], 6, 1700485571),
                p = d(p, h, m, _, t[i + 3], 10, -1894986606),
                _ = d(_, p, h, m, t[i + 10], 15, -1051523),
                m = d(m, _, p, h, t[i + 1], 21, -2054922799),
                h = d(h, m, _, p, t[i + 8], 6, 1873313359),
                p = d(p, h, m, _, t[i + 15], 10, -30611744),
                _ = d(_, p, h, m, t[i + 6], 15, -1560198380),
                m = d(m, _, p, h, t[i + 13], 21, 1309151649),
                h = d(h, m, _, p, t[i + 4], 6, -145523070),
                p = d(p, h, m, _, t[i + 11], 10, -1120210379),
                _ = d(_, p, h, m, t[i + 2], 15, 718787259),
                m = d(m, _, p, h, t[i + 9], 21, -343485551),
                h = s(h, n),
                m = s(m, a),
                _ = s(_, o),
                p = s(p, r);
        return [h, m, _, p]
    }
    function m(t) {
        var e, i = "";
        for (e = 0; e < 32 * t.length; e += 8)
            i += String.fromCharCode(t[e >> 5] >>> e % 32 & 255);
        return i
    }
    function _(t) {
        var e, i = [];
        for (i[(t.length >> 2) - 1] = void 0,
                 e = 0; e < i.length; e += 1)
            i[e] = 0;
        for (e = 0; e < 8 * t.length; e += 8)
            i[e >> 5] |= (255 & t.charCodeAt(e / 8)) << e % 32;
        return i
    }
    function p(t) {
        return m(h(_(t), 8 * t.length))
    }
    function g(t) {
        var e, i, n = "0123456789abcdef", a = "";
        for (i = 0; i < t.length; i += 1)
            e = t.charCodeAt(i),
                a += n.charAt(e >>> 4 & 15) + n.charAt(15 & e);
        return a
    }
    function v(t) {
        return unescape(encodeURIComponent(t))
    }
    function w(t) {
        return p(v(t))
    }
    function y(t) {
        return g(w(t))
    }
    function C(t, e, i) {
        return e ? i ? b(e, t) : x(e, t) : i ? w(t) : y(t)
    }

    function a() {
        var t = Math.floor((new Date).getTime() / 1e3)
            , e = t.toString(16).toUpperCase()
            , i = C(t).toString().toUpperCase();
        if (8 != e.length)
            return {
                as: "479BB4B7254C150",
                cp: "7E0AC8874BB0985"
            };
        for (var n = i.slice(0, 5), a = i.slice(-5), s = "", r = 0; r < 5; r++)
            s += n[r] + e[r];
        for (var l = "", u = 0; u < 5; u++)
            l += e[u + 3] + a[u];
        return {
            as: "A1" + s + e.slice(-3),
            cp: e.slice(0, 3) + l + "E1"
        }
    }
    return a()
}
function get_signature(){
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(f) {
            return typeof f
        }
        : function(f) {
            return f && "function" == typeof Symbol && f.constructor === Symbol && f !== Symbol.prototype ? "symbol" : typeof f
        }
    ;
    TAC = function() {
        function f(f, b, a, c, d, r) {
            null == r && (r = this);
            var n, i, o = {}, l = o.d = d ? d.d + 1 : 0;
            for (o["$" + l] = o,
                     i = 0; i < l; i++)
                o[n = "$" + i] = d[n];
            for (i = 0,
                     l = o.length = c.length; i < l; i++)
                o[i] = c[i];
            return e(f, b, a, o, r)[1]
        }
        function e(r, o, l, t, v, y) {
            function h(f) {
                S[++A] = f
            }
            function k() {
                return S[A--]
            }
            function m(f, e) {
                for (var b = a, c = "", d = 0; d < f.length; d++) {
                    var r = f.charCodeAt(d);
                    c += String.fromCharCode(b ^ r),
                        b = (b << 1) + d + e + 1 + (b >> 1) & 255
                }
                return c
            }
            null == v && (v = this);
            var g, C, x, I, S = [], A = 0;
            y && (g = y);
            for (var w = o + 2 * l; o < w; ) {
                var z = 13 * i(r, o) % 241;
                if (o += 2,
                0 == (3 & z))
                    if (0 == (3 & (z >>= 2))) {
                        if (0 == (z >>= 2))
                            return [1, S[A--]];
                        if (2 == z)
                            oprand = n(r, o),
                                o += 2 * oprand[0],
                                I = oprand[1],
                                S[++A] = +I;
                        else if (4 == z)
                            g = S[A--],
                                S[A] = S[A] * g;
                        else if (6 == z)
                            g = S[A--],
                                S[A] = S[A] != g;
                        else if (13 == z)
                            C = S[A--],
                                x = S[A--],
                                (I = S[A--]).x === e ? S[++A] = f(r, I.pc, I.len, C, I.z, x) : S[++A] = I.apply(x, C);
                        else {
                            if (15 != z)
                                break;
                            oprand = n(r, o),
                                I = oprand[1],
                                S[A] = function(b, a) {
                                    var c = function e() {
                                        var b = arguments;
                                        return f(r, e.pc, e.len, b, e.z, this)
                                    };
                                    return c.pc = b,
                                        c.len = a,
                                        c.x = e,
                                        c.z = t,
                                        c
                                }(o + 6, I - 4),
                                o += 2 * I - 2
                        }
                    } else if (1 == (3 & z))
                        if (3 == (z >>= 2))
                            g = S[--A],
                                S[A] = g(S[A + 1]);
                        else if (5 == z)
                            S[A -= 1] = S[A][S[A + 1]];
                        else if (7 == z)
                            S[A] = --S[A];
                        else {
                            if (9 != z)
                                break;
                            g = S[A--],
                                S[A] = typeof g
                        }
                    else if (2 == (3 & z))
                        if (6 == (z >>= 2))
                            S[A] = u(S[A]);
                        else if (8 == z)
                            g = S[A--],
                                oprand = n(r, o),
                                o += 2 * oprand[0],
                                S[A--][m(b[oprand[1]], oprand[1])] = g;
                        else {
                            if (10 != z) {
                                if (12 == z)
                                    throw S[A--];
                                break
                            }
                            S[A] = ~S[A]
                        }
                    else if (0 == (z >>= 2))
                        S[++A] = null;
                    else if (2 == z)
                        g = S[A--],
                            S[A] = S[A] >= g;
                    else if (9 == z)
                        g = k(),
                            C = k(),
                            t[0] = 65599 * t[0] + t[g].charCodeAt(C) >>> 0;
                    else if (11 == z)
                        S[++A] = void 0;
                    else {
                        if (13 != z)
                            break;
                        g = S[A--],
                            S[A] = S[A] && g
                    }
                else if (1 == (3 & z))
                    if (0 == (3 & (z >>= 2))) {
                        if (4 == (z >>= 2)) {
                            oprand = n(r, o),
                                I = oprand[1];
                            try {
                                if (c[d][2] = 1,
                                1 == (g = e(r, o + 6, I - 4, t, v))[0])
                                    return g
                            } catch (y) {
                                if (c[d] && c[d][1] && 1 == (g = e(r, c[d][1][0], c[d][1][1], t, v, y))[0])
                                    return g
                            } finally {
                                if (c[d] && c[d][0] && 1 == (g = e(r, c[d][0][0], c[d][0][1], t, v))[0])
                                    return g;
                                c[d] = 0,
                                    d--
                            }
                            o += 2 * I - 2
                        } else if (6 == z)
                            oprand = n(r, o),
                                o += 2 * oprand[0],
                                I = oprand[1],
                                S[A -= I] = p("x,y", "return new x[y](" + Array(I + 1).join(",x[++y]").substr(1) + ")")(S, A);
                        else if (8 == z)
                            g = S[A--],
                                S[A] = S[A] & g;
                        else if (10 != z)
                            break
                    } else if (1 == (3 & z))
                        if (0 == (z >>= 2))
                            S[A] = !S[A];
                        else if (7 == z)
                            C = S[A--],
                                g = delete S[A--][C];
                        else if (9 == z)
                            oprand = n(r, o),
                                o += 2 * oprand[0],
                                S[A] = S[A][m(b[oprand[1]], oprand[1])];
                        else {
                            if (11 != z)
                                break;
                            g = S[A--],
                                S[A] = S[A] << g
                        }
                    else if (2 == (3 & z))
                        if (1 == (z >>= 2))
                            S[++A] = g;
                        else if (3 == z)
                            g = S[A--],
                                S[A] = S[A] <= g;
                        else if (10 == z)
                            g = S[A -= 2][S[A + 1]] = S[A + 2],
                                A--;
                        else if (12 == z)
                            g = S[A],
                                S[++A] = g;
                        else {
                            if (14 != z)
                                break;
                            g = S[A--],
                                S[A] = S[A] || g
                        }
                    else if (0 == (z >>= 2))
                        S[A] = !S[A];
                    else if (2 == z)
                        oprand = n(r, o),
                            o += 2 * (I = oprand[1]) - 2;
                    else if (4 == z)
                        g = S[A--],
                            S[A] = S[A] / g;
                    else if (6 == z)
                        g = S[A--],
                            S[A] = S[A] !== g;
                    else {
                        if (13 != z)
                            break;
                        S[++A] = v
                    }
                else if (2 == (3 & z))
                    if (0 == (3 & (z >>= 2)))
                        if (1 == (z >>= 2))
                            g = S[A--],
                                S[A] = S[A] > g;
                        else if (8 == z)
                            oprand = n(r, o),
                                o += 2 * oprand[0],
                                I = oprand[1],
                                C = A + 1,
                                S[A -= I - 1] = I ? S.slice(A, C) : [];
                        else if (10 == z)
                            oprand = n(r, o),
                                o += 2 * oprand[0],
                                I = oprand[1],
                                g = S[A--],
                                t[I] = g;
                        else {
                            if (12 != z)
                                break;
                            g = S[A--],
                                S[A] = S[A] >> g
                        }
                    else if (1 == (3 & z))
                        if (0 == (z >>= 2))
                            S[++A] = s;
                        else if (2 == z)
                            g = S[A--],
                                S[A] = S[A] + g;
                        else if (4 == z)
                            g = S[A--],
                                S[A] = S[A] == g;
                        else if (11 == z)
                            oprand = n(r, o),
                                o += 2 * oprand[0],
                                I = oprand[1],
                                S[--A] = p("x,y", "return x " + m(b[I], I) + " y")(S[A], S[A + 1]);
                        else {
                            if (13 != z)
                                break;
                            g = S[A - 1],
                                C = S[A],
                                S[++A] = g,
                                S[++A] = C
                        }
                    else if (2 == (3 & z))
                        if (1 == (z >>= 2))
                            oprand = n(r, o),
                                o += 2 * oprand[0],
                                S[++A] = m(b[oprand[1]], oprand[1]);
                        else if (3 == z)
                            S[A--] ? o += 6 : (oprand = n(r, o),
                                o += 2 * (I = oprand[1]) - 2);
                        else if (5 == z)
                            g = S[A--],
                                S[A] = S[A] % g;
                        else if (7 == z)
                            g = S[A--],
                                S[A] = S[A]instanceof g;
                        else {
                            if (14 != z)
                                break;
                            S[++A] = !1
                        }
                    else if (4 == (z >>= 2))
                        oprand = n(r, o),
                            I = oprand[1],
                            c[d][0] && !c[d][2] ? c[d][1] = [o + 6, I - 4] : c[d++] = [0, [o + 6, I - 4], 0],
                            o += 2 * I - 2;
                    else if (6 == z)
                        oprand = n(r, o),
                            o += 2 * oprand[0],
                            I = oprand[1],
                            S[++A] = t["$" + I];
                    else {
                        if (8 != z)
                            break;
                        g = S[A--],
                            S[A] = S[A] | g
                    }
                else if (0 == (3 & (z >>= 2)))
                    if (1 == (z >>= 2))
                        oprand = n(r, o),
                            o += 2 * oprand[0],
                            I = oprand[1],
                            S[++A] = +m(b[I], I);
                    else if (3 == z)
                        g = S[A--],
                            S[A] = S[A] - g;
                    else if (5 == z)
                        g = S[A--],
                            S[A] = S[A] === g;
                    else if (12 == z)
                        C = S[A--],
                            x = S[A--],
                            (I = S[A--]).x === e ? S[++A] = f(r, I.pc, I.len, C, I.z, x) : S[++A] = I.apply(x, C);
                    else {
                        if (14 != z)
                            break;
                        g = S[A],
                            S[A] = S[A - 1],
                            S[A - 1] = g
                    }
                else if (1 == (3 & z))
                    if (2 == (z >>= 2))
                        h(function(f) {
                            var e = 0
                                , b = f.length;
                            return function() {
                                var a = e < b;
                                a && h(f[e++]),
                                    h(a)
                            }
                        }(S[A]));
                    else if (4 == z)
                        oprand = n(r, o),
                            o += 2 * oprand[0],
                            I = oprand[1],
                            g = t[I],
                            S[++A] = g;
                    else if (6 == z)
                        S[A] = ++S[A];
                    else {
                        if (8 != z)
                            break;
                        g = S[A--],
                            S[A] = S[A]in g
                    }
                else if (2 == (3 & z))
                    if (5 == (z >>= 2))
                        ;
                    else if (7 == z)
                        g = S[A--];
                    else if (9 == z)
                        g = S[A--],
                            S[A] = S[A] ^ g;
                    else {
                        if (11 != z)
                            break;
                        oprand = n(r, o),
                            I = oprand[1],
                            c[++d] = [[o + 6, I - 4], 0, 0],
                            o += 2 * I - 2
                    }
                else if (1 == (z >>= 2))
                    g = S[A--],
                        S[A] = S[A] < g;
                else if (8 == z)
                    oprand = n(r, o),
                        o += 2 * oprand[0],
                        I = oprand[1],
                        S[A] = S[A][I];
                else if (10 == z)
                    S[++A] = !0;
                else {
                    if (12 != z)
                        break;
                    g = S[A--],
                        S[A] = S[A] >>> g
                }
            }
            return [0, null]
        }
        var b = []
            , a = 0
            , c = []
            , d = 0
            , r = function(f, e) {
                var b = "" + f[e++] + f[e];
                return parseInt(b, 16)
            }
            , n = function(f, e) {
                var b = f[e++]
                    , a = f[e]
                    , c = parseInt("" + b + a, 16);
                if (c >> 7 == 0)
                    return c >> 6 != 0 && (c = -64 | 63 & c),
                        [1, c];
                if (c >> 6 == 2) {
                    var d = parseInt("" + f[++e] + f[++e], 16);
                    return 0 != (32 & c) ? c = -32 | 31 & c : c &= 31,
                        c <<= 8,
                        d = c + d,
                        [2, d]
                }
                if (c >> 6 == 3) {
                    var r = parseInt("" + f[++e] + f[++e], 16)
                        , n = parseInt("" + f[++e] + f[++e], 16);
                    return 0 != (32 & c) ? c = -32 | 31 & c : c &= 31,
                        c <<= 16,
                        r <<= 8,
                        n = c + r + n,
                        [3, n]
                }
            }
            , i = function(f, e) {
                var b = f[e++]
                    , a = f[e];
                return parseInt("" + b + a, 16)
            }
            , o = function(f, e) {
                var b = "" + f[e++] + f[e];
                return b = parseInt(b, 16),
                    String.fromCharCode(b)
            }
            , l = function(f, e, b) {
                for (var a = "", c = 0; c < b; c++)
                    a += o(f, e),
                        e += 2;
                return a
            }
            , t = function(f, e, a) {
                for (var c = 0; c < a; c++) {
                    var d = n(f, e);
                    e += 2 * d[0];
                    var r = l(f, e, d[1]);
                    b.push(r),
                        e += 2 * d[1]
                }
            }
            , s = this
            , p = s.Function
            , u = Object.keys || function(f) {
                var e = {}
                    , b = 0;
                for (var a in f)
                    e[b++] = a;
                return e.length = b,
                    e
            }
        ;
        return function(e) {
            e.length;
            for (var c = 0, d = "", i = c; i < c + 16; )
                d += o(e, i),
                    i += 2;
            if ("HNOJ@?RC" != d)
                throw new Error("error magic number " + d);
            n(e, c += 16);
            c += 8,
                a = 0;
            for (var l = 0; l < 4; l++) {
                var s = r(e, c + 2 * l);
                a += (3 & s) << 2 * l
            }
            c += 16;
            var p = n(e, c += 16)
                , u = p[1]
                , v = c += 2 * p[0];
            c += p[1];
            var y = n(e, c);
            y[1];
            c += 2 * y[0],
                b = [],
                t(e, c, y[1]),
                f(e, v, u, [])
        }
    }(),
        TAC("", []);

    

    function p(t, e) {
        var i = "";
        /^http/.test(t) || (t = location.protocol + "//" + location.host + t);
        for (var n in e)
            i += "&" + n + "=" + encodeURIComponent(e[n]);
        t += t.indexOf("?") > -1 ? t.split("?")[1] ? i : i.slice(1) : "?" + i.slice(1);
        var a = {
            url: t
        }
            , s =  byted_acrawler.sign(a)
        console.log(t)
        return s
    }
    let value = get_as_cp()
    let _signature = p(t="/toutiao/api/pc/feed/?min_behot_time=0",
        e={
            category: "__all__",
            utm_source: "toutiao",
            widen: 1,
            tadrequire: true,
            as: value.as,
            cp: value.cp,
        })
    return {
        as: value.as,
        cp: value.cp,
        _signature: _signature
    }
}
console.log(get_signature())