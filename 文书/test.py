import requests,re,json,time,base64
import hashlib


def getwenshu(params,word='',key='',iv=''):
    url = 'http://127.0.0.1:3000/{}/?'.format(params)
    if params == 'get_random':
        url = url + 'size=24'
        #print(url)
        res = requests.get(url=url).content.decode('utf-8')
        return res
    elif params == 'decrypt':
        data ={'word':word,
               'key':key,
               "iv":iv
        }
        #print(url)
        res = requests.post(url=url,data=data).content.decode('utf-8')
        return res




def test():
    url = 'http://wenshu.court.gov.cn/website/parse/rest.q4w'
    data = {
            "s21": "马",
            "pageId": "%s" % getwenshu('get_uuid'),
            "sortFields": "s50:desc",  # 按照法院层级降序排列
            "ciphertext": "%s" % getwenshu('get_cipher'),
            "pageNum": "1",
            "pageSize": "5",
            "queryCondition": '[{"key":"s8","value":"04"}]',  # 这边可以自定义选择，04表示行政案件
            "cfg": "com.lawyee.judge.dc.parse.dto.SearchDataDsoDTO@queryDoc",
            "__RequestVerificationToken": "%s" % getwenshu('get_random')
        }
    headers = {
            "Cookie":"“，
            "Host":"wenshu.court.gov.cn",
            "Referer":"http://wenshu.court.gov.cn/website/wenshu/181217BMTKHNT2W0/index.html?pageId=e3596df27f47c87a2738d4b20441aa22&s21=%E9%A9%AC",
            "Origin":"http://wenshu.court.gov.cn",
            "User-Agent":"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36",
        }

    res = requests.post(url=url,data=data,headers=headers)
    print(res.content.decode('utf-8'))
    res=res.json()
    result = res.get('result')
    secretKey = res.get('secretKey')
    #after_result = get_result(result,secretKey,time.strftime("%Y%m%d"))
    after_result = getwenshu('decrypt',result,secretKey,time.strftime("%Y%m%d"))
    print(after_result)


#test()
### 测试
print(etwenshu('get_uuid'))
print(etwenshu('get_cipher'))
print(etwenshu('get_random'))
result = ""
secretKey = "KAWXZKQGRIEIymYHvQD5IXTn"
iv = time.strftime("%Y%m%d")
after_result = getwenshu('decrypt',result,secretKey,'20200312')
print(after_result)
